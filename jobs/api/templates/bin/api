#!/bin/bash
set -eu
<%

  ##     ##    ###    ##       #### ########     ###    ######## ####  #######  ##    ##
  ##     ##   ## ##   ##        ##  ##     ##   ## ##      ##     ##  ##     ## ###   ##
  ##     ##  ##   ##  ##        ##  ##     ##  ##   ##     ##     ##  ##     ## ####  ##
  ##     ## ##     ## ##        ##  ##     ## ##     ##    ##     ##  ##     ## ## ## ##
   ##   ##  ######### ##        ##  ##     ## #########    ##     ##  ##     ## ##  ####
    ## ##   ##     ## ##        ##  ##     ## ##     ##    ##     ##  ##     ## ##   ###
     ###    ##     ## ######## #### ########  ##     ##    ##    ####  #######  ##    ##

  p('cluster.name').match(/^[a-zA-Z][a-zA-Z0-9._-]*$/) or
    raise 'cluster.name must be alphanumeric (no spaces are allowed)'

-%>

JOB=api
SIGTERM_FOR=15
SIGKILL_FOR=5

RUN_DIR=/var/vcap/sys/run/k8s
LOG_DIR=/var/vcap/sys/log/k8s/$JOB
JOB_DIR=/var/vcap/jobs/$JOB
DAT_DIR=/var/vcap/data/k8s/$JOB
PIDFILE=$RUN_DIR/$JOB.pid
mkdir -p $LOG_DIR
exec >>$LOG_DIR/$JOB.log 2>&1

# set kube-* binaries in our path
export PATH=$PATH:/var/vcap/packages/k8s/bin

case $1 in
  start)
    mkdir -p $RUN_DIR

    echo "[$(date)] $JOB/$$: starting up..."
    if [[ -f $PID_FILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $JOB/$$: found pid file $PID_FILE, with pid '$PID' (which is running)"
          exit 1
        fi
        echo "[$(date)] $JOB/$$: found (stale) pid file $PID_FILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi

    echo $$ > $PIDFILE
    exec kube-apiserver \
           --advertise-address=${INTERNAL_IP} \
           --allow-privileged=true \
           --apiserver-count=3 \
           --audit-log-maxage=30 \
           --audit-log-maxbackup=3 \
           --audit-log-maxsize=100 \
           --audit-log-path=$LOG_DIR/audit.log \\
           --authorization-mode=Node,RBAC \
           --bind-address=0.0.0.0 \
           --client-ca-file=$JOB_DIR/tls/client/ca.pem \
           --enable-admission-plugins=Initializers,NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
           --enable-swagger-ui=true \
           --etcd-cafile=$JOB_DIR/tls/etcd/ca.pem \
           --etcd-certfile=$JOB_DIR/tls/etcd/certificate.pem \
           --etcd-keyfile=$JOB_DIR/tls/etcd/key.pem \
           --etcd-servers=<%= link('etcd').instances.map { |vm| "https://#{vm.address}:#{link('etcd').p('port')}" }.join(',') %> \
           --event-ttl=1h \
           --experimental-encryption-provider-config=$JOB_DIR/etc/encryption.yml \
           --kubelet-certificate-authority=$JOB_DIR/tls/kubelet/ca.pem \
           --kubelet-client-certificate=$JOB_DIR/tls/kubelet/certificate.pem \
           --kubelet-client-key=$JOB_DIR/tls/kubelet/key.pem \
           --kubelet-https=true \
           --runtime-config=api/all \
           --service-account-key-file=$JOB_DIR/tls/sa/key.pem \
           --service-cluster-ip-range=10.32.0.0/24 \
           --service-node-port-range=30000-32767 \
           --tls-cert-file=$JOB_DIR/tls/api/certificae.pem \
           --tls-private-key-file=$JOB_DIR/tls/api/key.pem \
           --v=2
    echo "[$(date)] $JOB/$$: exec failed!"
    exit 42
    ;;


  stop)
    echo "[$(date)] $JOB/$$: shutting down..."
    if [[ -f $PID_FILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $JOB/$$: found pid file $PID_FILE, with pid '$PID' (which is running)"
          echo "[$(date)] $JOB/$$: sending SIGTERM for ${SIGTERM_FOR}s, followed by a SIGKILL..."
          for i in $(seq 1 $(expr $SIGTERM_FOR \* 10)); do
            kill -TERM $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $JOB/$$: pid $PID terminated (via SIGTERM)"
              rm -f $PIDFILE
              echo "[$(date)] $JOB/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done

          echo "[$(date)] $JOB/$$: pid $PID did not termiante (via SIGTERM) within ${SIGTERM_FOR}s; sending a SIGKILL and waiting ${SIGKILL_FOR}s..."
          for i in $(seq 1 $(expr $SIGKILL_FOR \* 10)); do
            kill -KILL $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $JOB/$$: pid $PID terminated (via SIGKILL)"
              rm -f $PIDFILE
              echo "[$(date)] $JOB/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done
          echo "[$(date)] $JOB/$$: pid $PID did not termiante (via SIGKILL) within ${SIGKILL_FOR}s; giving up."
          exit 1
        fi

        echo "[$(date)] $JOB/$$: found (stale) pid file $PID_FILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi
    echo "[$(date)] $JOB/$$: shut down complete"
    exit 0
    ;;
esac
